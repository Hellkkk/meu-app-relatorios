require('dotenv').config();
const User = require('./models/User');
const Company = require('./models/Company');
require('./config/database')();

async function manageUserCompanyLinks() {
  try {
    console.log('üîó Gerenciador de V√≠nculos Usu√°rio-Empresa\n');

    // Listar usu√°rios com empresas
    console.log('üìã USU√ÅRIOS E SUAS EMPRESAS:');
    const users = await User.find().populate('companies', 'name cnpj');
    
    users.forEach(user => {
      console.log(`üë§ ${user.username} (${user.email}) - Role: ${user.role}`);
      if (user.companies.length > 0) {
        user.companies.forEach(company => {
          console.log(`   üè¢ ${company.name} (${company.cnpj})`);
        });
      } else {
        console.log('   üìù Nenhuma empresa vinculada');
      }
      console.log('');
    });

    console.log('\nüìã EMPRESAS E SEUS FUNCION√ÅRIOS:');
    const companies = await Company.find().populate('employees', 'username email').populate('responsibleUser', 'username email');
    
    companies.forEach(company => {
      console.log(`üè¢ ${company.name} (${company.cnpj})`);
      
      if (company.responsibleUser) {
        console.log(`   üëë Respons√°vel: ${company.responsibleUser.username} (${company.responsibleUser.email})`);
      } else {
        console.log('   üëë Respons√°vel: N√£o definido');
      }
      
      if (company.employees.length > 0) {
        company.employees.forEach(employee => {
          console.log(`   üë§ ${employee.username} (${employee.email})`);
        });
      } else {
        console.log('   üìù Nenhum funcion√°rio');
      }
      console.log('');
    });

    // Verificar inconsist√™ncias
    console.log('\nüîç VERIFICANDO INCONSIST√äNCIAS...');
    
    let inconsistencies = 0;
    
    for (let user of users) {
      for (let companyId of user.companies) {
        const company = await Company.findById(companyId);
        if (company) {
          const isEmployee = company.employees.some(empId => empId.toString() === user._id.toString());
          const isResponsible = company.responsibleUser && company.responsibleUser.toString() === user._id.toString();
          
          if (!isEmployee && !isResponsible) {
            console.log(`‚ùå INCONSIST√äNCIA: ${user.username} est√° vinculado √† empresa ${company.name}, mas n√£o est√° na lista de funcion√°rios nem √© respons√°vel`);
            inconsistencies++;
          }
        } else {
          console.log(`‚ùå INCONSIST√äNCIA: ${user.username} est√° vinculado a uma empresa que n√£o existe (ID: ${companyId})`);
          inconsistencies++;
        }
      }
    }
    
    for (let company of companies) {
      for (let employeeId of company.employees) {
        const user = await User.findById(employeeId);
        if (user) {
          const hasCompany = user.companies.some(compId => compId.toString() === company._id.toString());
          if (!hasCompany) {
            console.log(`‚ùå INCONSIST√äNCIA: ${user.username} √© funcion√°rio da empresa ${company.name}, mas a empresa n√£o est√° em sua lista`);
            inconsistencies++;
          }
        } else {
          console.log(`‚ùå INCONSIST√äNCIA: Empresa ${company.name} tem um funcion√°rio que n√£o existe (ID: ${employeeId})`);
          inconsistencies++;
        }
      }
      
      if (company.responsibleUser) {
        const responsible = await User.findById(company.responsibleUser);
        if (responsible) {
          const hasCompany = responsible.companies.some(compId => compId.toString() === company._id.toString());
          if (!hasCompany) {
            console.log(`‚ùå INCONSIST√äNCIA: ${responsible.username} √© respons√°vel pela empresa ${company.name}, mas a empresa n√£o est√° em sua lista`);
            inconsistencies++;
          }
        } else {
          console.log(`‚ùå INCONSIST√äNCIA: Empresa ${company.name} tem um respons√°vel que n√£o existe (ID: ${company.responsibleUser})`);
          inconsistencies++;
        }
      }
    }
    
    if (inconsistencies === 0) {
      console.log('‚úÖ Nenhuma inconsist√™ncia encontrada!');
    } else {
      console.log(`‚ö†Ô∏è  ${inconsistencies} inconsist√™ncia(s) encontrada(s)`);
    }

    console.log('\nüìã COMANDOS DISPON√çVEIS PARA CORRIGIR:');
    console.log('Para remover usu√°rio de empresa:');
    console.log('curl -X DELETE http://localhost:5001/api/admin/users/{userId}/companies/{companyId} -H "Authorization: Bearer {token}"');
    console.log('');
    console.log('Para remover funcion√°rio de empresa:');
    console.log('curl -X DELETE http://localhost:5001/api/companies/{companyId}/employees/{userId} -H "Authorization: Bearer {token}"');
    console.log('');
    console.log('Para adicionar usu√°rio a empresa:');
    console.log('curl -X POST http://localhost:5001/api/admin/users/{userId}/companies/{companyId} -H "Authorization: Bearer {token}"');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    process.exit(1);
  }
}

// Fun√ß√£o para remover v√≠nculos (apenas para emerg√™ncias)
async function cleanUserCompanyLinks() {
  try {
    console.log('üßπ LIMPEZA DE V√çNCULOS - Use com cuidado!');
    
    // Remover todas as empresas de todos os usu√°rios
    await User.updateMany({}, { $set: { companies: [] } });
    
    // Remover todos os funcion√°rios e respons√°veis de todas as empresas
    await Company.updateMany({}, { 
      $set: { 
        employees: [],
        responsibleUser: null
      }
    });
    
    console.log('‚úÖ Todos os v√≠nculos foram removidos!');
    console.log('‚ö†Ô∏è  Agora voc√™ precisar√° recriar os v√≠nculos manualmente via interface ou API');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    process.exit(1);
  }
}

// Verificar argumentos da linha de comando
const command = process.argv[2];

if (command === 'clean') {
  console.log('‚ö†Ô∏è  ATEN√á√ÉO: Isso remover√° TODOS os v√≠nculos entre usu√°rios e empresas!');
  console.log('Digite "confirmar" para continuar:');
  
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  rl.question('', (answer) => {
    if (answer === 'confirmar') {
      cleanUserCompanyLinks();
    } else {
      console.log('Opera√ß√£o cancelada');
      process.exit(0);
    }
    rl.close();
  });
} else {
  manageUserCompanyLinks();
}